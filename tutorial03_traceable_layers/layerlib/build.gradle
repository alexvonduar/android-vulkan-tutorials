apply plugin: 'com.android.library'

// Both cmake and ndkbuild are simple, pick one and feel free to remove the
// other one. This code is tested against Android Studio 2.3 + NDK-r14
// USE_CMAKE = 0 :  use ndkbuild plugin to build layers ( does not work with windows )
// USE_CMAKE = 1 :  use cmake plugin to build layers
def USE_CMAKE = 1

android {
    compileSdkVersion 24

    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
        ndk.abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        externalNativeBuild {
            if (USE_CMAKE) {
                cmake.arguments '-DANDROID_TOOLCHAIN=clang', '-DANDROID_STL=gnustl_static'
            } else {
                ndkBuild.arguments 'NDK_DEBUG=1'
            }
        }
    }
    externalNativeBuild {
        if (USE_CMAKE) {
            cmake.path 'CMakeLists.txt'
        } else {
            ndkBuild.path android.ndkDirectory +
                    "/sources/third_party/vulkan/src/build-android/jni/Android.mk"
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:24.1.1'
    testImplementation 'junit:junit:4.12'
}
